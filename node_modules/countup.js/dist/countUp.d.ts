export interface CountUpOptions {
    startVal?: number;
    decimalPlaces?: number;
    duration?: number;
    useGrouping?: boolean;
    useEasing?: boolean;
    smartEasingThreshold?: number;
    smartEasingAmount?: number;
    separator?: string;
    decimal?: string;
    easingFn?: (t: number, b: number, c: number, d: number) => number;
    formattingFn?: (n: number) => string;
    prefix?: string;
    suffix?: string;
    numerals?: string[];
}
export declare class CountUp {
    private target;
    private endVal;
    private options?;
    version: string;
    private defaults;
    private el;
    private rAF;
    private startTime;
    private decimalMult;
    private remaining;
    private finalEndVal;
    private useEasing;
    private countDown;
    formattingFn: (num: number) => string;
    easingFn?: (t: number, b: number, c: number, d: number) => number;
    callback: (args?: any) => any;
    error: string;
    startVal: number;
    duration: number;
    paused: boolean;
    frameVal: number;
    constructor(target: string | HTMLElement | HTMLInputElement, endVal: number, options?: CountUpOptions);
    private determineDirectionAndSmartEasing;
    start(callback?: (args?: any) => any): void;
    pauseResume(): void;
    reset(): void;
    update(newEndVal: any): void;
    count: (timestamp: number) => void;
    printValue(val: number): void;
    ensureNumber(n: any): boolean;
    validateValue(value: number): number;
    private resetDuration;
    formatNumber: (num: number) => string;
    easeOutExpo: (t: number, b: number, c: number, d: number) => number;
}


// types/countup/index.d.ts
// declare function CountUp(target: string, startVal: number, endVal: number, decimals: number, duration: number, options: any): void;
// declare module CountUp {
//     var options: CountUpOptions;
//     function version(): string;
//     function printValue(value: any): void;
//     function count(timestamp: any): void;
//     function start(callback: Function): boolean;
//     function pauseResume(): void;
//     function reset(): void;
//     function update(newEndVal: number): void;
// }

// interface CountUp {
//     new(target: string, startVal: number, endVal: number, decimals: number, duration: number, options: any): CountUp;
//     options: CountUpOptions;
//     version(): string;
//     printValue(value: any): void;
//     count(timestamp: any): void;
//     start(callback?: Function): boolean;
//     pauseResume(): void;
//     reset(): void;
//     update(newEndVal: number): void;
// }

// interface CountUpOptions {
//     useEasing: boolean; // toggle easing
//     useGrouping: boolean; // 1,000,000 vs 1000000
//     separator: string; // character to use as a separator
//     decimal: string; // character to use as a decimal
//     easingFn: Function; // optional custom easing clos
//     formattingFn: Function; // optional custom formatting function, default is self.formatNumber below
// }
// export = CountUp;
